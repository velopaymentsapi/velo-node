/**
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.20.118
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import FundingAccountResponse from '../model/FundingAccountResponse';
import FundingRequestV1 from '../model/FundingRequestV1';
import FundingRequestV2 from '../model/FundingRequestV2';
import GetFundingsResponse from '../model/GetFundingsResponse';
import InlineResponse400 from '../model/InlineResponse400';
import InlineResponse401 from '../model/InlineResponse401';
import InlineResponse403 from '../model/InlineResponse403';
import ListFundingAccountsResponse from '../model/ListFundingAccountsResponse';
import ListSourceAccountResponse from '../model/ListSourceAccountResponse';
import ListSourceAccountResponseV2 from '../model/ListSourceAccountResponseV2';
import PageResourceFundingPayorStatusAuditResponseFundingPayorStatusAuditResponse from '../model/PageResourceFundingPayorStatusAuditResponseFundingPayorStatusAuditResponse';
import SetNotificationsRequest from '../model/SetNotificationsRequest';
import SourceAccountResponse from '../model/SourceAccountResponse';
import SourceAccountResponseV2 from '../model/SourceAccountResponseV2';
import TransferRequest from '../model/TransferRequest';

/**
* FundingManager service.
* @module api/FundingManagerApi
* @version 2.20.118
*/
export default class FundingManagerApi {

    /**
    * Constructs a new FundingManagerApi. 
    * @alias module:api/FundingManagerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAchFundingRequest operation.
     * @callback module:api/FundingManagerApi~createAchFundingRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Funding Request
     * Instruct a funding request to transfer funds from the payor’s funding bank to the payor’s balance held within Velo.
     * @param {String} sourceAccountId Source account id
     * @param {module:model/FundingRequestV1} fundingRequestV1 Body to included ammount to be funded
     * @param {module:api/FundingManagerApi~createAchFundingRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createAchFundingRequest(sourceAccountId, fundingRequestV1, callback) {
      let postBody = fundingRequestV1;
      // verify the required parameter 'sourceAccountId' is set
      if (sourceAccountId === undefined || sourceAccountId === null) {
        throw new Error("Missing the required parameter 'sourceAccountId' when calling createAchFundingRequest");
      }
      // verify the required parameter 'fundingRequestV1' is set
      if (fundingRequestV1 === undefined || fundingRequestV1 === null) {
        throw new Error("Missing the required parameter 'fundingRequestV1' when calling createAchFundingRequest");
      }

      let pathParams = {
        'sourceAccountId': sourceAccountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/sourceAccounts/{sourceAccountId}/achFundingRequest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFundingRequest operation.
     * @callback module:api/FundingManagerApi~createFundingRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Funding Request
     * Instruct a funding request to transfer funds from the payor’s funding bank to the payor’s balance held within Velo  (202 - accepted, 400 - invalid request body, 404 - source account not found).
     * @param {String} sourceAccountId Source account id
     * @param {module:model/FundingRequestV2} fundingRequestV2 Body to included ammount to be funded
     * @param {module:api/FundingManagerApi~createFundingRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createFundingRequest(sourceAccountId, fundingRequestV2, callback) {
      let postBody = fundingRequestV2;
      // verify the required parameter 'sourceAccountId' is set
      if (sourceAccountId === undefined || sourceAccountId === null) {
        throw new Error("Missing the required parameter 'sourceAccountId' when calling createFundingRequest");
      }
      // verify the required parameter 'fundingRequestV2' is set
      if (fundingRequestV2 === undefined || fundingRequestV2 === null) {
        throw new Error("Missing the required parameter 'fundingRequestV2' when calling createFundingRequest");
      }

      let pathParams = {
        'sourceAccountId': sourceAccountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/sourceAccounts/{sourceAccountId}/fundingRequest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFundingAccount operation.
     * @callback module:api/FundingManagerApi~getFundingAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FundingAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Funding Account
     * Get Funding Account by ID
     * @param {String} fundingAccountId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.sensitive  (default to false)
     * @param {module:api/FundingManagerApi~getFundingAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FundingAccountResponse}
     */
    getFundingAccount(fundingAccountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fundingAccountId' is set
      if (fundingAccountId === undefined || fundingAccountId === null) {
        throw new Error("Missing the required parameter 'fundingAccountId' when calling getFundingAccount");
      }

      let pathParams = {
        'fundingAccountId': fundingAccountId
      };
      let queryParams = {
        'sensitive': opts['sensitive']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FundingAccountResponse;
      return this.apiClient.callApi(
        '/v1/fundingAccounts/{fundingAccountId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFundingAccounts operation.
     * @callback module:api/FundingManagerApi~getFundingAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFundingAccountsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Funding Accounts
     * Get the source accounts.
     * @param {Object} opts Optional parameters
     * @param {String} opts.payorId 
     * @param {String} opts.sourceAccountId 
     * @param {Number} opts.page Page number. Default is 1. (default to 1)
     * @param {Number} opts.pageSize Page size. Default is 25. Max allowable is 100. (default to 25)
     * @param {String} opts.sort  (default to 'accountName:asc')
     * @param {Boolean} opts.sensitive  (default to false)
     * @param {module:api/FundingManagerApi~getFundingAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFundingAccountsResponse}
     */
    getFundingAccounts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'payorId': opts['payorId'],
        'sourceAccountId': opts['sourceAccountId'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'sort': opts['sort'],
        'sensitive': opts['sensitive']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFundingAccountsResponse;
      return this.apiClient.callApi(
        '/v1/fundingAccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFundingsV1 operation.
     * @callback module:api/FundingManagerApi~getFundingsV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFundingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Fundings for Payor
     * Get a list of Fundings for a payor. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.payorId The account owner Payor ID
     * @param {Number} opts.page Page number. Default is 1. (default to 1)
     * @param {Number} opts.pageSize Page size. Default is 25. Max allowable is 100. (default to 25)
     * @param {String} opts.sort List of sort fields. Example: ```?sort=destinationCurrency:asc,destinationAmount:asc``` Default is no sort. The supported sort fields are: dateTime and amount. 
     * @param {module:api/FundingManagerApi~getFundingsV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFundingsResponse}
     */
    getFundingsV1(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'payorId': opts['payorId'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFundingsResponse;
      return this.apiClient.callApi(
        '/v1/paymentaudit/fundings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSourceAccount operation.
     * @callback module:api/FundingManagerApi~getSourceAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details about given source account.
     * Get details about given source account.
     * @param {String} sourceAccountId Source account id
     * @param {module:api/FundingManagerApi~getSourceAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceAccountResponse}
     */
    getSourceAccount(sourceAccountId, callback) {
      let postBody = null;
      // verify the required parameter 'sourceAccountId' is set
      if (sourceAccountId === undefined || sourceAccountId === null) {
        throw new Error("Missing the required parameter 'sourceAccountId' when calling getSourceAccount");
      }

      let pathParams = {
        'sourceAccountId': sourceAccountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SourceAccountResponse;
      return this.apiClient.callApi(
        '/v1/sourceAccounts/{sourceAccountId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSourceAccountV2 operation.
     * @callback module:api/FundingManagerApi~getSourceAccountV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceAccountResponseV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details about given source account.
     * Get details about given source account.
     * @param {String} sourceAccountId Source account id
     * @param {module:api/FundingManagerApi~getSourceAccountV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceAccountResponseV2}
     */
    getSourceAccountV2(sourceAccountId, callback) {
      let postBody = null;
      // verify the required parameter 'sourceAccountId' is set
      if (sourceAccountId === undefined || sourceAccountId === null) {
        throw new Error("Missing the required parameter 'sourceAccountId' when calling getSourceAccountV2");
      }

      let pathParams = {
        'sourceAccountId': sourceAccountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SourceAccountResponseV2;
      return this.apiClient.callApi(
        '/v2/sourceAccounts/{sourceAccountId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSourceAccounts operation.
     * @callback module:api/FundingManagerApi~getSourceAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSourceAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of source accounts
     * List source accounts.
     * @param {Object} opts Optional parameters
     * @param {String} opts.physicalAccountName Physical Account Name
     * @param {String} opts.payorId The account owner Payor ID
     * @param {Number} opts.page Page number. Default is 1. (default to 1)
     * @param {Number} opts.pageSize Page size. Default is 25. Max allowable is 100. (default to 25)
     * @param {String} opts.sort List of sort fields e.g. ?sort=name:asc Default is name:asc The supported sort fields are - fundingRef  (default to 'fundingRef:asc')
     * @param {module:api/FundingManagerApi~getSourceAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSourceAccountResponse}
     */
    getSourceAccounts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'physicalAccountName': opts['physicalAccountName'],
        'payorId': opts['payorId'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSourceAccountResponse;
      return this.apiClient.callApi(
        '/v1/sourceAccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSourceAccountsV2 operation.
     * @callback module:api/FundingManagerApi~getSourceAccountsV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSourceAccountResponseV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of source accounts
     * List source accounts.
     * @param {Object} opts Optional parameters
     * @param {String} opts.physicalAccountName Physical Account Name
     * @param {String} opts.physicalAccountId The physical account ID
     * @param {String} opts.payorId The account owner Payor ID
     * @param {String} opts.fundingAccountId The funding account ID
     * @param {Number} opts.page Page number. Default is 1. (default to 1)
     * @param {Number} opts.pageSize Page size. Default is 25. Max allowable is 100. (default to 25)
     * @param {String} opts.sort List of sort fields e.g. ?sort=name:asc Default is name:asc The supported sort fields are - fundingRef, name, balance  (default to 'fundingRef:asc')
     * @param {module:api/FundingManagerApi~getSourceAccountsV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSourceAccountResponseV2}
     */
    getSourceAccountsV2(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'physicalAccountName': opts['physicalAccountName'],
        'physicalAccountId': opts['physicalAccountId'],
        'payorId': opts['payorId'],
        'fundingAccountId': opts['fundingAccountId'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSourceAccountResponseV2;
      return this.apiClient.callApi(
        '/v2/sourceAccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFundingAuditDeltas operation.
     * @callback module:api/FundingManagerApi~listFundingAuditDeltasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceFundingPayorStatusAuditResponseFundingPayorStatusAuditResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Funding Audit Delta
     * Get funding audit deltas for a payor
     * @param {String} payorId 
     * @param {Date} updatedSince 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number. Default is 1. (default to 1)
     * @param {Number} opts.pageSize Page size. Default is 25. Max allowable is 100. (default to 25)
     * @param {module:api/FundingManagerApi~listFundingAuditDeltasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceFundingPayorStatusAuditResponseFundingPayorStatusAuditResponse}
     */
    listFundingAuditDeltas(payorId, updatedSince, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'payorId' is set
      if (payorId === undefined || payorId === null) {
        throw new Error("Missing the required parameter 'payorId' when calling listFundingAuditDeltas");
      }
      // verify the required parameter 'updatedSince' is set
      if (updatedSince === undefined || updatedSince === null) {
        throw new Error("Missing the required parameter 'updatedSince' when calling listFundingAuditDeltas");
      }

      let pathParams = {
      };
      let queryParams = {
        'payorId': payorId,
        'updatedSince': updatedSince,
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageResourceFundingPayorStatusAuditResponseFundingPayorStatusAuditResponse;
      return this.apiClient.callApi(
        '/v1/deltas/fundings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setNotificationsRequest operation.
     * @callback module:api/FundingManagerApi~setNotificationsRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set notifications
     * Set notifications for a given source account
     * @param {String} sourceAccountId Source account id
     * @param {module:model/SetNotificationsRequest} setNotificationsRequest Body to included minimum balance to set
     * @param {module:api/FundingManagerApi~setNotificationsRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setNotificationsRequest(sourceAccountId, setNotificationsRequest, callback) {
      let postBody = setNotificationsRequest;
      // verify the required parameter 'sourceAccountId' is set
      if (sourceAccountId === undefined || sourceAccountId === null) {
        throw new Error("Missing the required parameter 'sourceAccountId' when calling setNotificationsRequest");
      }
      // verify the required parameter 'setNotificationsRequest' is set
      if (setNotificationsRequest === undefined || setNotificationsRequest === null) {
        throw new Error("Missing the required parameter 'setNotificationsRequest' when calling setNotificationsRequest");
      }

      let pathParams = {
        'sourceAccountId': sourceAccountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/sourceAccounts/{sourceAccountId}/notifications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferFunds operation.
     * @callback module:api/FundingManagerApi~transferFundsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer Funds between source accounts
     * Transfer funds between source accounts for a Payor. The 'from' source account is identified in the URL, and is the account which will be debited. The 'to' (destination) source account is in the body, and is the account which will be credited. Both source accounts must belong to the same Payor. There must be sufficient balance in the 'from' source account, otherwise the transfer attempt will fail.
     * @param {String} sourceAccountId The 'from' source account id, which will be debited
     * @param {module:model/TransferRequest} transferRequest Body
     * @param {module:api/FundingManagerApi~transferFundsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    transferFunds(sourceAccountId, transferRequest, callback) {
      let postBody = transferRequest;
      // verify the required parameter 'sourceAccountId' is set
      if (sourceAccountId === undefined || sourceAccountId === null) {
        throw new Error("Missing the required parameter 'sourceAccountId' when calling transferFunds");
      }
      // verify the required parameter 'transferRequest' is set
      if (transferRequest === undefined || transferRequest === null) {
        throw new Error("Missing the required parameter 'transferRequest' when calling transferFunds");
      }

      let pathParams = {
        'sourceAccountId': sourceAccountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/sourceAccounts/{sourceAccountId}/transfers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
