/**
 * Velo Payments APIs
 * ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 
 *
 * The version of the OpenAPI document: 2.17.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import OfacStatus from '../model/OfacStatus';
import OnboardedStatus from '../model/OnboardedStatus';
import PagedPayeeResponse from '../model/PagedPayeeResponse';
import PagedPayeeResponse2 from '../model/PagedPayeeResponse2';
import Payee from '../model/Payee';
import PayeeDeltaResponse from '../model/PayeeDeltaResponse';
import PayeeType from '../model/PayeeType';
import UpdateRemoteIdRequest from '../model/UpdateRemoteIdRequest';
import WatchlistStatus from '../model/WatchlistStatus';

/**
* Payees service.
* @module api/PayeesApi
* @version 2.17.8
*/
export default class PayeesApi {

    /**
    * Constructs a new PayeesApi. 
    * @alias module:api/PayeesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deletePayeeById operation.
     * @callback module:api/PayeesApi~deletePayeeByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Payee by Id
     * This API will delete Payee by Id (UUID). Deletion by ID is not allowed if: * Payee ID is not found * If Payee has not been on-boarded * If Payee is in grace period * If Payee has existing payments 
     * @param {String} payeeId The UUID of the payee.
     * @param {module:api/PayeesApi~deletePayeeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePayeeById(payeeId, callback) {
      let postBody = null;
      // verify the required parameter 'payeeId' is set
      if (payeeId === undefined || payeeId === null) {
        throw new Error("Missing the required parameter 'payeeId' when calling deletePayeeById");
      }

      let pathParams = {
        'payeeId': payeeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/payees/{payeeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayeeById operation.
     * @callback module:api/PayeesApi~getPayeeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Payee} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Payee by Id
     * Get Payee by Id
     * @param {String} payeeId The UUID of the payee.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.sensitive Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked. If set to true, and you have permission, the PII values will be returned as their original unmasked values. 
     * @param {module:api/PayeesApi~getPayeeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Payee}
     */
    getPayeeById(payeeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'payeeId' is set
      if (payeeId === undefined || payeeId === null) {
        throw new Error("Missing the required parameter 'payeeId' when calling getPayeeById");
      }

      let pathParams = {
        'payeeId': payeeId
      };
      let queryParams = {
        'sensitive': opts['sensitive']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Payee;
      return this.apiClient.callApi(
        '/v1/payees/{payeeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPayeeChanges operation.
     * @callback module:api/PayeesApi~listPayeeChangesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PayeeDeltaResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Payee Changes
     * Get a paginated response listing payee changes.
     * @param {String} payorId The Payor ID to find associated Payees
     * @param {Date} updatedSince The updatedSince filter in the format YYYY-MM-DDThh:mm:ss+hh:mm
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number. Default is 1. (default to 1)
     * @param {Number} opts.pageSize Page size. Default is 100. Max allowable is 1000. (default to 100)
     * @param {module:api/PayeesApi~listPayeeChangesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayeeDeltaResponse}
     */
    listPayeeChanges(payorId, updatedSince, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'payorId' is set
      if (payorId === undefined || payorId === null) {
        throw new Error("Missing the required parameter 'payorId' when calling listPayeeChanges");
      }
      // verify the required parameter 'updatedSince' is set
      if (updatedSince === undefined || updatedSince === null) {
        throw new Error("Missing the required parameter 'updatedSince' when calling listPayeeChanges");
      }

      let pathParams = {
      };
      let queryParams = {
        'payorId': payorId,
        'updatedSince': updatedSince,
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PayeeDeltaResponse;
      return this.apiClient.callApi(
        '/v1/deltas/payees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPayees operation.
     * @callback module:api/PayeesApi~listPayeesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedPayeeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Payees
     * Get a paginated response listing the payees for a payor.
     * @param {String} payorId The account owner Payor ID
     * @param {Object} opts Optional parameters
     * @param {module:model/OfacStatus} opts.ofacStatus The ofacStatus of the payees.
     * @param {module:model/OnboardedStatus} opts.onboardedStatus The onboarded status of the payees.
     * @param {String} opts.email Email address
     * @param {String} opts.displayName The display name of the payees.
     * @param {String} opts.remoteId The remote id of the payees.
     * @param {module:model/PayeeType} opts.payeeType The onboarded status of the payees.
     * @param {String} opts.payeeCountry The country of the payee - 2 letter ISO 3166-1 country code (upper case)
     * @param {Number} opts.page Page number. Default is 1. (default to 1)
     * @param {Number} opts.pageSize Page size. Default is 25. Max allowable is 100. (default to 25)
     * @param {String} opts.sort List of sort fields (e.g. ?sort=onboardedStatus:asc,name:asc) Default is name:asc 'name' is treated as company name for companies - last name + ',' + firstName for individuals The supported sort fields are - payeeId, displayName, payoutStatus, onboardedStatus.  (default to 'displayName:asc')
     * @param {module:api/PayeesApi~listPayeesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedPayeeResponse}
     */
    listPayees(payorId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'payorId' is set
      if (payorId === undefined || payorId === null) {
        throw new Error("Missing the required parameter 'payorId' when calling listPayees");
      }

      let pathParams = {
      };
      let queryParams = {
        'payorId': payorId,
        'ofacStatus': opts['ofacStatus'],
        'onboardedStatus': opts['onboardedStatus'],
        'Email': opts['email'],
        'displayName': opts['displayName'],
        'remoteId': opts['remoteId'],
        'payeeType': opts['payeeType'],
        'payeeCountry': opts['payeeCountry'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedPayeeResponse;
      return this.apiClient.callApi(
        '/v1/payees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPayeesV3 operation.
     * @callback module:api/PayeesApi~listPayeesV3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedPayeeResponse2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Payees
     * Get a paginated response listing the payees for a payor.
     * @param {String} payorId The account owner Payor ID
     * @param {Object} opts Optional parameters
     * @param {module:model/WatchlistStatus} opts.ofacStatus The watchlistStatus of the payees.
     * @param {module:model/OnboardedStatus} opts.onboardedStatus The onboarded status of the payees.
     * @param {String} opts.email Email address
     * @param {String} opts.displayName The display name of the payees.
     * @param {String} opts.remoteId The remote id of the payees.
     * @param {module:model/PayeeType} opts.payeeType The onboarded status of the payees.
     * @param {String} opts.payeeCountry The country of the payee - 2 letter ISO 3166-1 country code (upper case)
     * @param {Number} opts.page Page number. Default is 1. (default to 1)
     * @param {Number} opts.pageSize Page size. Default is 25. Max allowable is 100. (default to 25)
     * @param {String} opts.sort List of sort fields (e.g. ?sort=onboardedStatus:asc,name:asc) Default is name:asc 'name' is treated as company name for companies - last name + ',' + firstName for individuals The supported sort fields are - payeeId, displayName, payoutStatus, onboardedStatus.  (default to 'displayName:asc')
     * @param {module:api/PayeesApi~listPayeesV3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedPayeeResponse2}
     */
    listPayeesV3(payorId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'payorId' is set
      if (payorId === undefined || payorId === null) {
        throw new Error("Missing the required parameter 'payorId' when calling listPayeesV3");
      }

      let pathParams = {
      };
      let queryParams = {
        'payorId': payorId,
        'ofacStatus': opts['ofacStatus'],
        'onboardedStatus': opts['onboardedStatus'],
        'Email': opts['email'],
        'displayName': opts['displayName'],
        'remoteId': opts['remoteId'],
        'payeeType': opts['payeeType'],
        'payeeCountry': opts['payeeCountry'],
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedPayeeResponse2;
      return this.apiClient.callApi(
        '/v3/payees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1PayeesPayeeIdRemoteIdUpdatePost operation.
     * @callback module:api/PayeesApi~v1PayeesPayeeIdRemoteIdUpdatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Payee Remote Id
     * Update the remote Id for the given Payee Id.
     * @param {String} payeeId The UUID of the payee.
     * @param {module:model/UpdateRemoteIdRequest} updateRemoteIdRequest Request to update payee remote id
     * @param {module:api/PayeesApi~v1PayeesPayeeIdRemoteIdUpdatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v1PayeesPayeeIdRemoteIdUpdatePost(payeeId, updateRemoteIdRequest, callback) {
      let postBody = updateRemoteIdRequest;
      // verify the required parameter 'payeeId' is set
      if (payeeId === undefined || payeeId === null) {
        throw new Error("Missing the required parameter 'payeeId' when calling v1PayeesPayeeIdRemoteIdUpdatePost");
      }
      // verify the required parameter 'updateRemoteIdRequest' is set
      if (updateRemoteIdRequest === undefined || updateRemoteIdRequest === null) {
        throw new Error("Missing the required parameter 'updateRemoteIdRequest' when calling v1PayeesPayeeIdRemoteIdUpdatePost");
      }

      let pathParams = {
        'payeeId': payeeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/payees/{payeeId}/remoteIdUpdate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
